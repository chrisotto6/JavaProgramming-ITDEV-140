/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package finalproject;

import static com.sun.java.accessibility.util.AWTEventMonitor.addActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author chris_000
 */
public final class FinalProject extends javax.swing.JFrame {
    //Create global variables
    DefaultListModel listModel = new DefaultListModel();
    ResultSet rs = null;
    Statement state = null;
    Connection conn = null;
    String name;
    String listName;
    int rowNumber;
    String selectedValue;
    
    /**
     * Creates new form MyList
     */
    public FinalProject() throws SQLException {

        initComponents();
        fillList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() throws SQLException {
        //Declares listeners
        ActionListener listener = new listListener();
        ListSelectionListener listen = new listChange();
        
        //Setup Database access
        Properties properties = new Properties();
        properties.put("user", "cotto");    // user name
        properties.put("password", "cotto");    // password
        
        conn=DriverManager.getConnection(
            "jdbc:derby://localhost:1527/List", properties);
        state = conn.createStatement();
        
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jScrollPane1 = new javax.swing.JScrollPane();
        itemsList = new javax.swing.JList();
        nameLbl = new javax.swing.JLabel();
        qtyLbl = new javax.swing.JLabel();
        sizeLbl = new javax.swing.JLabel();
        noteLbl = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        noteText = new javax.swing.JTextArea();
        sizeText = new javax.swing.JTextField();
        quantityText = new javax.swing.JTextField();
        nameText = new javax.swing.JTextField();
        itemLbl = new javax.swing.JLabel();
        add = new javax.swing.JButton();
        update = new javax.swing.JButton();
        delete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        JList itemsList = new JList(listModel);
        
        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, itemsList, org.jdesktop.beansbinding.ObjectProperty.create(), itemsList, org.jdesktop.beansbinding.BeanProperty.create("elements"));
        bindingGroup.addBinding(binding);

        jScrollPane1.setViewportView(itemsList);

        nameLbl.setText("Name");

        qtyLbl.setText("Quantity");

        sizeLbl.setText("Size");

        noteLbl.setText("Note");

        noteText.setColumns(20);
        noteText.setRows(5);
        jScrollPane2.setViewportView(noteText);

        sizeText.setMaximumSize(new java.awt.Dimension(166, 1));
        sizeText.setMinimumSize(new java.awt.Dimension(166, 1));

        quantityText.setMaximumSize(new java.awt.Dimension(166, 1));
        quantityText.setMinimumSize(new java.awt.Dimension(166, 1));

        nameText.setMaximumSize(new java.awt.Dimension(166, 1));
        nameText.setMinimumSize(new java.awt.Dimension(166, 1));

        itemLbl.setText("Items");
        
        itemsList.addListSelectionListener(listen);

        add.setText("Add");
        add.addActionListener(listener);

        update.setText("Update");
        update.addActionListener(listener);

        delete.setText("Delete");
        delete.addActionListener(listener);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(noteLbl)
                                    .addComponent(nameLbl)
                                    .addComponent(qtyLbl)
                                    .addComponent(sizeLbl))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(nameText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                                        .addComponent(quantityText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(sizeText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(add)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(update)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(delete))))
                    .addComponent(itemLbl))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(itemLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nameLbl)
                            .addComponent(nameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(qtyLbl)
                            .addComponent(quantityText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sizeLbl)
                            .addComponent(sizeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(noteLbl)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(delete)
                            .addComponent(update)
                            .addComponent(add))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FinalProject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FinalProject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FinalProject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FinalProject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new FinalProject().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(FinalProject.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    /**
     * Loads the fields with the selected data when the list selection changes
     */
    class listChange implements ListSelectionListener {
        @Override
        public void valueChanged(ListSelectionEvent event) {
            JList source = (JList)event.getSource();
            if(source.getModel().getSize() != 0) {
                listName = source.getSelectedValue().toString();
                try {
                    load(listName);
                } catch (SQLException ex) {
                    Logger.getLogger(FinalProject.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }
    
    /**
     * Loads the fields with the selected data SQL side
     * @param item
     * @throws SQLException 
     */
    public void load(String item) throws SQLException {
        String getData = "SELECT * FROM UNTITLED WHERE Name =" + "'" + item + "'";
        
        rs = state.executeQuery(getData);
        rs.next();
        rowNumber = rs.getInt("ID");
        nameText.setText(rs.getString("Name"));
        selectedValue = rs.getString("Name");
        quantityText.setText(rs.getString("Quantity"));
        sizeText.setText(rs.getString("Size"));
        noteText.setText(rs.getString("Note"));
    }
    
    /**
     * fills the jlist after each something happens
     * @throws SQLException 
     */
    public void fillList() throws SQLException {
        String sql = "Select NAME from UNTITLED ORDER BY Name ASC";
        rs = state.executeQuery(sql);
        listModel.removeAllElements();
        
        while (rs.next()) {
            name = rs.getString("Name");
            listModel.addElement(name);
        }
    }
    
    /**
     * Gets the largest int to increment upon insert
     * @return
     * @throws SQLException 
     */
    public int largestInt() throws SQLException {
        String getInt = "SELECT ID FROM UNTITLED";
        rs = state.executeQuery(getInt);
        int big = 0;
         while (rs.next()) {
            if (big < rs.getInt("ID")) {
                big = rs.getInt("ID");
            }
        }
        big = big + 1;
        
        return big;
    }
    
    /*
    Handles the button actions
    */
    class listListener implements ActionListener {
        /*
        action performed class, gets source and handles action based on source
        */
	public void actionPerformed(ActionEvent e) {
        //Creates source object
        Object source = e.getSource();
        
        //Creates items for use from the jFrame items
        String nam = nameText.getText();
        double qty = Double.parseDouble(quantityText.getText());
        String size = sizeText.getText();
        String note = noteText.getText();
        
        //Adds the items in the textboxes to the database
        if(source == add) {
            int id = 0;
            try {
                id = largestInt();
            } catch (SQLException ex) {
                Logger.getLogger(FinalProject.class.getName()).log(Level.SEVERE, null, ex);
            }
            String insert = "INSERT INTO UNTITLED (ID,NAME,QUANTITY,SIZE,NOTE) VALUES (" + id + ",'" + nam + "'," + qty +
                    ",'" + size + "','" + note + "')";
            try {
                state.execute(insert);
                nameText.setText("");
                quantityText.setText("");
                sizeText.setText("");
                noteText.setText("");
                fillList();
            } catch (SQLException ex) {
                Logger.getLogger(FinalProject.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if(source == update) {
            
            String update = "UPDATE UNTITLED SET Name = '" + nam + "',Quantity = " + qty + ", Size = '"
                    + size + "', Note = '" + note + "' WHERE ID = " + rowNumber;
            try {
                state.execute(update);
                nameText.setText("");
                quantityText.setText("");
                sizeText.setText("");
                noteText.setText("");
                fillList();
            } catch (SQLException ex) {
                Logger.getLogger(FinalProject.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        //Handles if the deleted button is selected
        else if(source == delete) {
            //creates new joption pane to prompt user of delete
            int result = JOptionPane.showConfirmDialog(null,
                    "Are you sure you want to delete this record?", null, JOptionPane.YES_NO_OPTION);
            
            if (result == JOptionPane.YES_OPTION) {
                String where = listName;
                String delete = "DELETE FROM UNTITLED WHERE Name = '" + where + "'";
                try {
                    state.execute(delete);
                    nameText.setText("");
                    quantityText.setText("");
                    sizeText.setText("");
                    noteText.setText("");
                    fillList();
                } catch (SQLException ex) {
                    Logger.getLogger(FinalProject.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
      }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JButton update;
    private javax.swing.JButton delete;
    private javax.swing.JLabel itemLbl;
    private javax.swing.JList itemsList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel nameLbl;
    private javax.swing.JTextField nameText;
    private javax.swing.JLabel noteLbl;
    private javax.swing.JTextArea noteText;
    private javax.swing.JLabel qtyLbl;
    private javax.swing.JTextField quantityText;
    private javax.swing.JLabel sizeLbl;
    private javax.swing.JTextField sizeText;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
